{"ast":null,"code":"import { uiActions } from './ui-slice';\nimport { cartActions } from './cart-slice';\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const res = await fetch('https://url.firebaseio.com/cart.json');\n      if (!res.ok) {\n        throw new Error('Could not fetch cart data!');\n      }\n      const data = await res.json();\n      return data;\n    };\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.replaceCart({\n        items: cartData.items || [],\n        totalQuantity: cartData.totalQuantity\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Fetching cart data failed!'\n      }));\n    }\n  };\n};\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n    const sendRequest = async () => {\n      const res = await fetch('https://url.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify({\n          items: cart.items,\n          totalQuantity: cart.totalQuantity\n        })\n      });\n      if (!res.ok) {\n        throw new Error('Sending cart data failed.');\n      }\n    };\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};","map":{"version":3,"names":["uiActions","cartActions","fetchCartData","dispatch","fetchData","res","fetch","ok","Error","data","json","cartData","replaceCart","items","totalQuantity","error","showNotification","status","title","message","sendCartData","cart","sendRequest","method","body","JSON","stringify"],"sources":["E:/learning/react udemy course/redux-advanced/src/store/cart-actions.js"],"sourcesContent":["import {uiActions} from './ui-slice';\r\nimport {cartActions} from './cart-slice';\r\n\r\nexport const fetchCartData = () => {\r\n    return async (dispatch) => {\r\n        const fetchData = async () => {\r\n            const res = await fetch('https://url.firebaseio.com/cart.json');\r\n\r\n            if (!res.ok) {\r\n                throw new Error('Could not fetch cart data!');\r\n            }\r\n\r\n            const data = await res.json();\r\n\r\n            return data;\r\n        };\r\n\r\n        try {\r\n            const cartData = await fetchData();\r\n            dispatch(cartActions.replaceCart({\r\n                items: cartData.items || [], totalQuantity: cartData.totalQuantity,\r\n            }));\r\n        } catch (error) {\r\n            dispatch(uiActions.showNotification({\r\n                status: 'error', title: 'Error!', message: 'Fetching cart data failed!',\r\n            }));\r\n        }\r\n    };\r\n};\r\n\r\nexport const sendCartData = (cart) => {\r\n    return async (dispatch) => {\r\n        dispatch(uiActions.showNotification({\r\n            status: 'pending', title: 'Sending...', message: 'Sending cart data!',\r\n        }));\r\n\r\n        const sendRequest = async () => {\r\n            const res = await fetch('https://url.firebaseio.com/cart.json', {\r\n                method: 'PUT', body: JSON.stringify({\r\n                    items: cart.items, totalQuantity: cart.totalQuantity,\r\n                }),\r\n            });\r\n\r\n            if (!res.ok) {\r\n                throw new Error('Sending cart data failed.');\r\n            }\r\n        };\r\n\r\n        try {\r\n            await sendRequest();\r\n\r\n            dispatch(uiActions.showNotification({\r\n                status: 'success', title: 'Success!', message: 'Sent cart data successfully!',\r\n            }));\r\n        } catch (error) {\r\n            dispatch(uiActions.showNotification({\r\n                status: 'error', title: 'Error!', message: 'Sending cart data failed!',\r\n            }));\r\n        }\r\n    };\r\n};"],"mappings":"AAAA,SAAQA,SAAS,QAAO,YAAY;AACpC,SAAQC,WAAW,QAAO,cAAc;AAExC,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC/B,OAAO,MAAOC,QAAQ,IAAK;IACvB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,sCAAsC,CAAC;MAE/D,IAAI,CAACD,GAAG,CAACE,EAAE,EAAE;QACT,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MACjD;MAEA,MAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;MAE7B,OAAOD,IAAI;IACf,CAAC;IAED,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMP,SAAS,CAAC,CAAC;MAClCD,QAAQ,CAACF,WAAW,CAACW,WAAW,CAAC;QAC7BC,KAAK,EAAEF,QAAQ,CAACE,KAAK,IAAI,EAAE;QAAEC,aAAa,EAAEH,QAAQ,CAACG;MACzD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZZ,QAAQ,CAACH,SAAS,CAACgB,gBAAgB,CAAC;QAChCC,MAAM,EAAE,OAAO;QAAEC,KAAK,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAC/C,CAAC,CAAC,CAAC;IACP;EACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,IAAI,IAAK;EAClC,OAAO,MAAOlB,QAAQ,IAAK;IACvBA,QAAQ,CAACH,SAAS,CAACgB,gBAAgB,CAAC;MAChCC,MAAM,EAAE,SAAS;MAAEC,KAAK,EAAE,YAAY;MAAEC,OAAO,EAAE;IACrD,CAAC,CAAC,CAAC;IAEH,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMjB,GAAG,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QAC5DiB,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAChCb,KAAK,EAAEQ,IAAI,CAACR,KAAK;UAAEC,aAAa,EAAEO,IAAI,CAACP;QAC3C,CAAC;MACL,CAAC,CAAC;MAEF,IAAI,CAACT,GAAG,CAACE,EAAE,EAAE;QACT,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAChD;IACJ,CAAC;IAED,IAAI;MACA,MAAMc,WAAW,CAAC,CAAC;MAEnBnB,QAAQ,CAACH,SAAS,CAACgB,gBAAgB,CAAC;QAChCC,MAAM,EAAE,SAAS;QAAEC,KAAK,EAAE,UAAU;QAAEC,OAAO,EAAE;MACnD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZZ,QAAQ,CAACH,SAAS,CAACgB,gBAAgB,CAAC;QAChCC,MAAM,EAAE,OAAO;QAAEC,KAAK,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAC/C,CAAC,CAAC,CAAC;IACP;EACJ,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}